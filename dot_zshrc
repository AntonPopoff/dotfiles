# Fuzzy cd
function jf {
    local start_location=''

    if [[ -n "$1" ]]; then
        start_location="$1"
    else
        start_location="$HOME"
    fi

    local target_dir="$(fd --hidden --type directory . "$start_location" | fzf)"

    if [[ -n "$target_dir" ]]; then
        cd "$target_dir"
    fi
}

# Fuzzy find and edit (nvim)
function ef {
    local start_location=''

    if [[ -n "$1" ]]; then
        start_location="$1"
    else
        start_location="$HOME"
    fi

    local target_file=$(fd --hidden --type file . "$start_location" | fzf --preview 'bat --color=always --number --theme="ansi" {}')

    if [[ -n "$target_file" ]]; then
        nvim "$target_file"
    fi
}

# Interactive Git Switch Branch via fzf
function gsb() {

    # Show branches including remote
    # Remove leading spaces and asterisks
    # Remove duplicated branch names
    # Feed the output to fzf
    local target=$(git branch --all | \
        sed -E 's/^\*?\s{1,2}//' | \
        sed -E 's/remotes\/origin\///' | \
        awk '!branches[$0]++' | \
        fzf)

    if [[ -n $target ]]; then
        git switch $target
    fi
}

# Add current git branch name to zsh prompt if inside of a git repository
function parse_git_branch() {
    local current_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)

    if [[ -z $current_branch ]]; then
        echo ""
    else
        echo "[$current_branch] "
    fi
}

# Neovim Aliases
alias vi='nvim'
alias vim='nvim'

# Make ls colorize output and show human readable sizes by default
alias ls='ls --human-readable --color=auto'

alias cat='bat --theme="ansi" --number'

# Make zsh autocomplete git commands
autoload -Uz compinit && compinit

# Set custom zsh prompt
setopt PROMPT_SUBST

# Git branch prompt
PROMPT=$'%B%F{blue}$(print -rD $PWD)%f%F{34} $(parse_git_branch)%f>%b '

# Enter tmux session on startup
if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
  tmux attach-session || tmux new-session
fi

